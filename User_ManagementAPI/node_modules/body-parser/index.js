const express = require('express');
const cors = require('cors');

const app = express();
const multer = require('multer');
app.use(express.json());
// Enable CORS for all routes
 
// Configure Multer for file upload
const storage = multer.diskStorage({
  destination: function (req, file, cb) {
    cb(null, 'uploads/'); // Specify upload directory
  },
  filename: function (req, file, cb) {
    cb(null, Date.now() + '-' + file.originalname); // File naming convention
  }
});
const upload = multer({ storage: storage });

app.use(cors()); // Enable CORS for Angular client
//app.use(bodyParser.json()); // Parse incoming JSON requests


// Use Express's built-in body parsing middleware
//app.use(express.json());  // No need for body-parser anymore

// In-memory data storage (no database)

let users = [
  { id: 114, userName: 'John Doe', userRole: 'Admin', userEmail: 'john.doe@example.com', status: 1 },
  { id: 115, userName: 'Jane Smith', userRole: 'Full Stack Developer', userEmail: 'jane.smith@example.com', status: 1 }
 ,{id :1,userName :"Sana",userRole:"Full Stack Developer",userEmail :"sana@gmail.com",status:1 },
    {id :12,userName :"Sana2",userRole:"Team Lead",userEmail :"sana2@gmail.com",status:2 },
    {id :13,userName :"Sana3",userRole:"Team Lead",userEmail :"sana3@gmail.com",status:2 },
    {id :14,userName :"Sana4",userRole:"Team Lead",userEmail :"sana4@gmail.com",status:2 },
    {id :15,userName :"Sana5",userRole:"Team Lead",userEmail :"sana5@gmail.com",status:2 },
    {id :16,userName :"Sana6",userRole:"Team Lead",userEmail :"sana6@gmail.com",status:2 },
    {id :17,userName :"Sana7",userRole:"Team Lead",userEmail :"sana7@gmail.com",status:2 },
    {id :18,userName :"Sana8",userRole:"Team Lead",userEmail :"sana8@gmail.com",status:2 },
    {id :19,userName :"Sana9",userRole:"Team Lead",userEmail :"sana9@gmail.com",status:2 },
    {id :110,userName :"Sana10",userRole:"Team Lead",userEmail :"sana10@gmail.com",status:2 },
    {id :111,userName :"Sana11",userRole:"Team Lead",userEmail :"sana11@gmail.com",status:2 },
    {id :112,userName :"Sana12",userRole:"Team Lead",userEmail :"sana12@gmail.com",status:2 },
    {id :113,userName :"Sana13",userRole:"Team Lead",userEmail :"sana13@gmail.com",status:2 },

  
  
  
  
  
  
  ];

// Create a user
// app.post('/users', (req, res) => {
//   const { id, name, role, email, status } = req.body;
//   users.push({ id, name, role, email, status });
//   res.status(201).json({ message: 'User created successfully', user: { id, name, role, email, status } });
// });

// Get all users
app.get('/', (req, res) => {
  res.json(users);
});//angular
app.get('/users', (req, res) => {
  res.json(users);
});

// Get a user by ID
app.get('/users/:id', (req, res) => {
  const user = users.find((u) => u.id === parseInt(req.params.id));
  if (user) {
    res.json(user);
  } else {
    res.status(404).json({ message: 'User not found' });
  }
});

// PUT endpoint to update user
app.put('/users/:id', (req, res) => {debugger;
  console.log('Request body:', req.body); // Debugging
  // Rest of the code...
  const userId = parseInt(req.params.id, 10);
  const { userName, userRole, userEmail, status } = req.body; // Destructure user details from req.body

  if (!userName || !userRole || !userEmail || typeof status === 'undefined') {
    return res.status(400).json({ message: 'Invalid request payload' });
  }

  const userIndex = users.findIndex(user => user.id === userId);
  if (userIndex === -1) {
    return res.status(404).json({ message: 'User not found' });
  }

  // Update user
  users[userIndex] = { ...users[userIndex], userName, userRole, userEmail, status };

  res.status(200).json({ message: 'User updated successfully', user: users[userIndex] });
});



// Delete a user
app.delete('/users/:id', (req, res) => {
  const index = users.findIndex((u) => u.id === parseInt(req.params.id));
  if (index !== -1) {
    const deletedUser = users.splice(index, 1);
    res.json({ message: 'User deleted successfully', user: deletedUser });
  } else {
    res.status(404).json({ message: 'User not found' });
  }
});
// POST route to add a new user
app.post('/users', upload.single('profilePic'), (req, res) => {
  const { userName, userEmail, userRole, status } = req.body; // Get form data from request body
  const file = req.file; // Get file from request

  // Basic validation for required fields
  if (!userName || !userEmail || !userRole) {
    return res.status(400).json({ error: 'Missing required fields: userName, userEmail, userRole' });
  }

  // Generate a 3-digit ID for the new user (replace with actual database ID if needed)
  const newUser = {
    userName,
    userEmail,
    userRole,
    status,
    id: Math.floor(Math.random() * 900) + 100,
    profilePic: file ? file.path : null // Save the file path if the file is uploaded
  };

  // Save the user (mock database logic here)
  users.push(newUser);

  // Respond with the new user data
  res.status(201).json(newUser);
});

// Start the server
const port = 3000;
app.listen(port, () => {
  console.log(`Server is running on http://localhost:${port}`);
});
